#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Description: Check-MK plugin for monitoring UPS managed by apcupsd
# File: apcupsd
# Version: 2.0
# Author: Michal Skalski <michal@skalski.org>
# Author: Christian Kreidl <christian.kreidl@ziti.uni-heidelberg.de>

# Example output from agent:
# <<<apcupsd>>>
# APC       001,043,1061
# DATE      2012-08-31 12:29:23 +0200
# HOSTNAME  localhost
# VERSION   3.14.10 (13 September 2011) debian
# UPSNAME   localhost
# CABLE     USB Cable
# DRIVER    USB UPS Driver
# UPSMODE   Stand Alone
# STARTTIME 2012-08-23 16:54:48 +0200
# MODEL     Smart-UPS 2200 RM
# STATUS    ONLINE
# LINEV     228.9 Volts
# LOADPCT    39.6 Percent Load Capacity
# BCHARGE   100.0 Percent
# TIMELEFT   27.0 Minutes
# MBATTCHG  5 Percent
# MINTIMEL  3 Minutes
# MAXTIME   0 Seconds
# OUTPUTV   228.9 Volts
# SENSE     High
# DWAKE     -01 Seconds
# DSHUTD    360 Seconds
# LOTRANS   208.0 Volts
# HITRANS   253.0 Volts
# RETPCT    015.0 Percent
# ITEMP     22.9 C Internal
# ALARMDEL  30 seconds
# BATTV     54.5 Volts
# LINEFREQ  50.0 Hz
# LASTXFER  Automatic or explicit self test
# NUMXFERS  0
# TONBATT   0 seconds
# CUMONBATT 0 seconds
# XOFFBATT  N/A
# SELFTEST  NO
# STESTI    14 days
# STATFLAG  0x07000008 Status Flag
# MANDATE   2008-10-25
# SERIALNO  JS0843021664
# BATTDATE  2008-10-25
# NOMOUTV   230 Volts
# NOMBATTV   48.0 Volts
# FIRMWARE  665.6.I USB FW:7.3
# END APC   2012-08-31 12:29:24 +0200

from cmk.base.check_api import check_levels
from cmk.base.check_legacy_includes.temperature import check_temperature

#from pprint import pprint
# show all local variables:       pprint( locals())

# Tuple[warn_upper, crit_upper]                          -> upper level checking only.
# Tuple[warn_upper, crit_upper, warn_lower, crit_lower]  -> upper and lower level checking.

# set default value of variable (user can override in main.mk)
factory_settings["apcupsd_temp_default_levels"] = {
        "levels"      : (30, 35),
        "levels_lower": (0, 60),
}
factory_settings["apcupsd_bcharge_default_levels"]   = (None, None, 80, 30)
factory_settings["apcupsd_timeleft_default_levels"]  = (None, None, 20, 10)
factory_settings["apcupsd_bvoltage_default_levels"]  = (None, None, 20.0, 15.0)
factory_settings["apcupsd_iovoltage_default_levels"] = (240, 250, 220, 210)
factory_settings["apcupsd_load_default_levels"]      = (50, 80)

# the parse function
def parse_apcupsd(info):
    result = {}
    values = {}
    for line in info:
        values[line[0]] = line[1:]
        if ''.join(line[0:2])=='ENDAPC':
            item=""
            if len(values.get("UPSNAME")) > 0 :
                item = ' '.join(values["UPSNAME"][0:])
            elif len(values.get("MODEL")) > 0 :
                item = ' '.join(ups["MODEL"][0:])
            elif len(values.get("DRIVER")) > 0 :
                item = ' '.join(values["DRIVER"][0:])
            else:
                return

            result[item]=values.copy()
            values.clear()

    return result


# the inventory function
def inventory_apcupsd(checkname,parsed):
    key = ""
    item = ""
    factory_defaults = {}

    if checkname == "apcupsd_temp":
        key = "ITEMP"
        factory_defaults = factory_settings["apcupsd_temp_default_levels"]

    if checkname == "apcupsd_bcharge":
        key = "BCHARGE";
        factory_defaults = factory_settings["apcupsd_bcharge_default_levels"]

    if checkname == "apcupsd_timeleft":
        key = "TIMELEFT";
        factory_defaults = factory_settings["apcupsd_timeleft_default_levels"]

    if checkname == "apcupsd_bvoltage":
        key = "BATTV";
        factory_defaults = factory_settings["apcupsd_bvoltage_default_levels"]

    if checkname == "apcupsd_involtage":
        key = "LINEV";
        factory_defaults = factory_settings["apcupsd_iovoltage_default_levels"]

    if checkname == "apcupsd_outvoltage":
        key = "OUTPUTV";
        factory_defaults = factory_settings["apcupsd_iovoltage_default_levels"]

    if checkname == "apcupsd_load":
        key = "LOADPCT";
        factory_defaults = factory_settings["apcupsd_load_default_levels"]

    if checkname == "apcupsd_status":
        key = "STATUS";
        factory_defaults = {}

    for upsname in parsed.keys():
        if len(parsed.get(upsname).get(key,{})) > 0 :
            yield upsname, factory_defaults
    return


# generic check
def check_apcupsd(item,params,parsed,apc_item_name,ds_name,infoname,unit):
    if apc_item_name in parsed.get(item, {}):
        try:
            value = float(parsed[item][apc_item_name][0])
        except ValueError:
            return

        yield check_levels(
            value=value,
            dsname=ds_name,
            params=params,
            infoname=infoname,
            unit=unit,
            )

    return


# Internal temperature
def check_apcupsd_temp(item, params, parsed):
    if 'ITEMP' in parsed.get(item, {}):
        try:
            value = float(parsed[item]['ITEMP'][0])
        except ValueError:
            return

        yield check_temperature(
            reading=value,
            params=params,
            unique_name="itemp",
            )

    return


# Status
def check_apcupsd_status(item, params, parsed):
    if 'STATUS' in parsed.get(item, {}):
        fullstatus = ' '.join(parsed[item]['STATUS'])
        status = parsed[item]['STATUS'][0]
        if status !=  "ONLINE":
            yield 1, "WARNING - Status: %s" % fullstatus
        else:
            yield 0, "OK - Status: %s" % fullstatus
    return (3, "UNKNOWN - not found in agent output")



# declare the check to Check_MK
check_info["apcupsd"] = {
    'parse_function'          : parse_apcupsd,
}
check_info["apcupsd.bcharge"] = {
    'check_function'          : lambda item,params,parsed:
                                check_apcupsd(item,params,parsed,'BCHARGE',"bcharge",
                                              "Battery charge","%"),
    'inventory_function'      : lambda parsed: inventory_apcupsd("apcupsd_bcharge", parsed),
    'service_description'     : "UPS %s battery charge",
    'default_levels_variable' : "apcupsd_bcharge_default_levels",
    'has_perfdata'            : True,
}
check_info["apcupsd.timeleft"] = {
    'check_function'          : lambda item,params,parsed:
                                check_apcupsd(item,params,parsed,'TIMELEFT',"tleft",
                                              "Remaining runtime on battery","minutes"),
    'inventory_function'      : lambda parsed: inventory_apcupsd("apcupsd_timeleft", parsed),
    'service_description'     : "UPS %s time remaining",
    'default_levels_variable' : "apcupsd_timeleft_default_levels",
    'has_perfdata'            : True,
}
check_info["apcupsd.bvoltage"] = {
    'check_function'          : lambda item,params,parsed:
                                check_apcupsd(item,params,parsed,'BATTV',"bvoltage",
                                              "Battery voltage","V"),
    'inventory_function'      : lambda parsed: inventory_apcupsd("apcupsd_bvoltage", parsed),
    'service_description'     : "UPS %s battery voltage",
    'default_levels_variable' : "apcupsd_bvoltage_default_levels",
    'has_perfdata'            : True,
}
check_info["apcupsd.involtage"] = {
    'check_function'          : lambda item,params,parsed:
                                check_apcupsd(item,params,parsed,'LINEV',"involtage",
                                              "Input line voltage","V"),
    'inventory_function'      : lambda parsed: inventory_apcupsd("apcupsd_involtage", parsed),
    'service_description'     : "UPS %s input voltage",
    'default_levels_variable' : "apcupsd_iovoltage_default_levels",
    'has_perfdata'            : True,
}
check_info["apcupsd.outvoltage"] = {
    'check_function'          : lambda item,params,parsed:
                                check_apcupsd(item,params,parsed,'OUTPUTV',"outvoltage",
                                              "Output voltage","V"),
    'inventory_function'      : lambda parsed: inventory_apcupsd("apcupsd_outvoltage", parsed),
    'service_description'     : "UPS %s output voltage",
    'default_levels_variable' : "apcupsd_iovoltage_default_levels",
    'has_perfdata'            : True,
}
check_info["apcupsd.load"] = {
    'check_function'          : lambda item,params,parsed:
                                check_apcupsd(item,params,parsed,'LOADPCT',"lcapacity",
                                              "Load capacity is ","%"),
    'inventory_function'      : lambda parsed: inventory_apcupsd("apcupsd_load", parsed),
    'service_description'     : "UPS %s capacity load",
    'default_levels_variable' : "apcupsd_load_default_levels",
    'has_perfdata'            : True,
}

check_info["apcupsd.temp"] = {
    'check_function'          : check_apcupsd_temp,
    'inventory_function'      : lambda parsed: inventory_apcupsd("apcupsd_temp", parsed),
    'service_description'     : "UPS %s internal temperature",
    'default_levels_variable' : "apcupsd_temp_default_levels",
    'group'                   : "temperature",
    'has_perfdata'            : True,
}
check_info["apcupsd.status"] = {
    'check_function'          : check_apcupsd_status,
    'inventory_function'      : lambda parsed: inventory_apcupsd("apcupsd_status", parsed),
    'service_description'     : "UPS %s status",
    'has_perfdata'            : False,
}
